import word2vec
import HH
import UltimateMatchingModel
import requests
import os

from pick import pick


def print_server_status():
    server_configs = word2vec.get_server_config()
    
    servers_to_try = [
        f"{server_configs['protocol']}://{server_configs['ip']}:{server_configs['port']}"
    ]
    
    for base_url in servers_to_try:
        try:
            response = requests.get(f"{base_url}{server_configs['api_endpoint']}", timeout=5)
            if response.status_code == 200:
                status = f"üü¢ –°–µ—Ä–≤–µ—Ä '{server_configs['ptr']}' –æ–Ω–ª–∞–π–Ω"
        except requests.exceptions.RequestException:
            status = f"üî¥ –°–µ—Ä–≤–µ—Ä '{server_configs['ptr']}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    return status

def print_banner():
    box_width = 70
    title = "HH_SSAR v1.0"
    subtitle1 = "HeadHunter Semantic Similarity Analysis"
    subtitle2 = "for Resume Matching"
    
    server_status = print_server_status()
    
    print(f"""
    ‚ïî{'‚ïê' * box_width}‚ïó
    ‚ïë{title:^{box_width}}‚ïë
    ‚ïë{subtitle1:^{box_width}}‚ïë
    ‚ïë{subtitle2:^{box_width}}‚ïë
    ‚ïö{'‚ïê' * box_width}‚ïù
    {server_status:^{box_width + 2}}
    """)

def ensure_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    env_file = '.env'
    
    if not os.path.exists(env_file):        
        parts = [
            "5054525f4e414d453d737361722e7732762e6d6f64656c730a",
            "5345525645525f49503d37382e3135332e3134392e35320a",
            "5345525645525f504f52543d383038300a",
            "5345525645525f50524f544f434f4c3d687474700a",
            "4150495f454e44504f494e543d2f6170692f6d6f64656c730a"
        ]
        
        try:
            decoded_config = bytes.fromhex(''.join(parts)).decode('utf-8')
            with open(env_file, 'w', encoding='utf-8') as f:
                f.write(decoded_config)           
        except Exception as e:
            return False
    else:
        pass    
    return True

def main_menu():
    action = ''

    while action != '–í—ã—Ö–æ–¥':
        select_mode = [
            'HH                 - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å HeadHunter',
            'Word2Vec           - –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π', 
            'UltimateMatcher    - –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
            '–í—ã—Ö–æ–¥'
        ]

        if action == '':
            action = pick(select_mode, f'–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã:', indicator='>')[0]

        module_name = action.split('-')[0].strip()

        try:
            if module_name == 'HH':
                HH.hh_menu()
            elif module_name == 'Word2Vec':
                word2vec.word2vec_menu()
            elif module_name == 'UltimateMatcher':
                UltimateMatchingModel.ultimate_matching_menu()
            elif module_name == '–í—ã—Ö–æ–¥':
                print("–í—ã—Ö–æ–¥...")
                break

        except KeyboardInterrupt:
            print(f"\n–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        
        action = ''


if __name__ == "__main__":
    try:
        ensure_env_file()
        print_banner()
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        main_menu()
    except KeyboardInterrupt:
        print(f"\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")